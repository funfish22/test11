{"version":3,"sources":["pages/default/Home/Home.tsx","pages/App/Router.tsx","resources/components/atoms/Logo/Logo.tsx","resources/components/atoms/Logo/index.tsx","resources/components/atoms/AddNoteButton/AddNoteButton.tsx","resources/components/atoms/AddNoteButton/index.tsx","pages/App/Menu.tsx","pages/App/App.js","pages/App/index.tsx","config/library/redux/store/Home/action.js","config/library/redux/store/Home/reducer.js","config/library/redux/store/rootReducers.js","config/library/redux/store/Home/saga.js","config/library/redux/store/rootSagas.js","App.tsx","serviceWorker.ts","index.tsx"],"names":["React","Component","Router","Logo","props","state","className","LogoTitle","styled","h1","AddNoteButton","onClick","AddNoteButtonRoot","AddIcon","AddNoteText","button","p","div","App","axios","get","then","res","setState","data","items","this","map","row","index","key","full_name","Types","GET_MASK_REQUEST","GET_MASK_SUCCESS","getMaskSuccess","list","type","payload","initState","Home","action","rootReducer","combineReducers","getMask","watchGetNoteRequest","console","log","result","put","actions","takeEvery","HomeSagas","fork","rootSagas","all","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducers","applyMiddleware","run","defaults","withCredentials","baseURL","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sXAYmBA,IAAMC,UCIVC,I,6YCPf,IAQeC,EARF,SAACC,EAAcC,GAAkB,IAClCC,EAAcF,EAAdE,UAER,OACI,kBAACC,EAAD,CAAWD,UAAWA,GAAtB,aAMFC,EAAYC,IAAOC,GAAV,KCjBAN,I,4qCCQf,IAWeO,EAXuC,SAACN,EAAcC,GAAkB,IAC3EC,EAAuBF,EAAvBE,UAAWK,EAAYP,EAAZO,QAEnB,OACI,kBAACC,EAAD,CAAmBN,UAAWA,EAAWK,QAASA,GAC9C,kBAACE,EAAD,MACA,kBAACC,EAAD,mCAONF,EAAoBJ,IAAOO,OAAV,KAiBjBD,EAAcN,IAAOQ,EAAV,KAOXH,EAAUL,IAAOS,IAAV,KC7CEP,I,uZCqBEF,IAAOS,IAAV,KAUGT,YAAOL,EAAPK,CAAH,KAIYA,YAAOE,EAAPF,CAAH,K,+FCGRU,E,2MA9BXb,MAAQ,G,mFAGa,IAAD,OAChBc,IAAMC,IAAI,yEAAyEC,MAAK,SAAAC,GAAG,OACvF,EAAKC,SAAS,CACVC,KAAMF,EAAIE,KAAKC,a,+BAIjB,IACED,EAASE,KAAKrB,MAAdmB,KACR,OACI,6BAEQA,GACI,oCAEQA,EAAKG,KAAI,SAACC,EAAKC,GAAN,OACL,wBAAIC,IAAKF,EAAIG,WAAYH,EAAIG,oB,GArB/C/B,IAAMC,WCNTiB,GDwCGV,IAAOS,IAAV,KCxCAC,G,SCFFc,EAAQ,CACjBC,iBAAkB,wBAClBC,iBAAkB,yBAOTC,EAAiB,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,MAAa,CACvCC,KAAML,EAAME,iBACZI,QAAS,CACLF,UCVFG,EAAY,CACdH,KAAM,IAiBKI,EAbF,WAAgC,IAA/BnC,EAA8B,uDAAtBkC,EAAWE,EAAW,uCACxC,OAAOA,EAAOJ,MACV,KAAKL,EAAME,iBACP,OAAO,eACA7B,EADP,CAEI+B,KAAMK,EAAOH,QAAQF,OAG7B,QACI,OAAO/B,ICRJqC,EAJKC,YAAgB,CAChCH,S,6CCAMI,G,WAcAC,GAdV,SAAUD,IAAV,uEAEQ,OAFR,kBAEcE,QAAQC,IAAI,OAF1B,OAKQ,OAFMC,EAAS7B,IAAMC,IAAI,qDACpBC,MAAK,SAAAC,GAAG,OAAIwB,QAAQC,IAAIzB,MAJrC,SAKcwB,QAAQC,IAAI,SAAUC,GALpC,OAMQ,OANR,SAMcC,YAAIC,EAAuB,CAC7Bd,KAAMY,KAPlB,+GAcA,SAAUH,IAAV,iEACI,OADJ,SACUM,YAAUD,EAAcjB,iBAAkBW,GADpD,uCAIA,IAIeQ,EAJG,CACdC,YAAKR,I,WCrBgBS,GAAV,SAAUA,IAAV,iEACX,OADW,SACLC,YAAI,YACHH,IAFI,uCCgBf,IAAMI,GAAmBC,OAAOC,sCAAwCC,IAElEC,GAAiBC,cAEnBC,GAAQC,YACVC,EACAR,GAAiBS,YAAgBL,MAGnCA,GAAeM,IAAIZ,GAEnBnC,IAAMgD,SAASC,iBAAkB,EAI/BjD,IAAMgD,SAASE,QAAU,0B,IAmBZnD,G,iLARX,OACE,kBAAC,IAAD,CAAU4C,MAAOA,IACf,kBAAC,EAAD,W,GANU9D,IAAMC,WC7BJqE,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3D,MAAK,SAAA4D,GACjCA,EAAaC,kB","file":"static/js/main.3f2b1d86.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getMaskRequest } from 'config/library/redux/store/Home/action';\r\n\r\ninterface Props {}\r\n\r\ninterface State {\r\n    data: any\r\n}\r\n\r\nclass Home extends React.Component<Props, State> {\r\n\r\n    state = {\r\n        data: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('https://api.github.com/search/repositories?q=react&per_page=10&page=2').then(res =>\r\n            console.log('res.data.items', res.data.items))\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.state\r\n        return (\r\n            <div> 123\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport {Switch, Route} from 'react-router-dom';\r\n\r\nimport Home from 'pages/default/Home';\r\n\r\n\r\nfunction Router() {\r\n    return(\r\n        <Switch>\r\n            <Route path=\"/\" exact component={Home} />\r\n\r\n            {/* <Route component={PageNotFound} /> */}\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Router;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface Props {\r\n    className?: string\r\n}\r\n\r\ninterface State {}\r\n\r\nconst Logo = (props: Props, state: State) => {\r\n    const { className } = props;\r\n\r\n    return(\r\n        <LogoTitle className={className}>FreeNote</LogoTitle>\r\n    )\r\n}\r\n\r\nexport default Logo;\r\n\r\nconst LogoTitle = styled.h1`\r\n    display: inline-block;\r\n    font-size: 22px;\r\n    position: relative;\r\n    color: #fff;\r\n\r\n    &:after{\r\n        position: absolute;\r\n        content: '';\r\n        width: 6px;\r\n        height: 6px;\r\n        border-radius: 50%;\r\n        background-color: #fff;\r\n        bottom: 8px;\r\n        right: -10px;\r\n    }\r\n`;","import Logo from './Logo';\r\n\r\nexport default Logo;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface Props {\r\n    className?: any,\r\n    onClick: any\r\n}\r\n\r\ninterface State {}\r\n\r\nconst AddNoteButton: React.FunctionComponent<Props> = (props: Props, state: State) => {\r\n    const { className, onClick } = props;\r\n\r\n    return(\r\n        <AddNoteButtonRoot className={className} onClick={onClick}>\r\n            <AddIcon></AddIcon>\r\n            <AddNoteText>新增筆記</AddNoteText>\r\n        </AddNoteButtonRoot>\r\n    )\r\n}\r\n\r\nexport default AddNoteButton;\r\n\r\nconst AddNoteButtonRoot = styled.button`\r\n    display: inline-flex;\r\n    align-items: center;\r\n    padding: 11px 46px 11px 30px;\r\n    cursor: pointer;\r\n    box-shadow: 0px 0px 6px rgba(255,255,255,.29);\r\n    border-radius: 8px;\r\n    white-space: nowrap;\r\n    background-color: #fff;\r\n    font-family: 'Helvetica Neue', 'Microsoft JhengHei', sans-serif;\r\n    transition: .5s;\r\n\r\n    &:hover{\r\n        box-shadow: 0px 0px 15px rgba(255,255,255,.5);\r\n    }\r\n`;\r\n\r\nconst AddNoteText = styled.p`\r\n    font-size: 18px;\r\n    line-height: 23px;\r\n    font-weight: bold;\r\n    color: #2F419B;\r\n`;\r\n\r\nconst AddIcon = styled.div`\r\n    width: 26px;\r\n    height: 26px;\r\n    border-radius: 50%;\r\n    background-color: #2F419B;\r\n    position: relative;\r\n    margin-right: 16px;\r\n\r\n    &:after,&:before {\r\n        position: absolute;\r\n        content: '';\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        background-color: #fff;\r\n    }\r\n\r\n    &:after {\r\n        width: 14px;\r\n        height: 2px;\r\n    }\r\n\r\n    &:before{\r\n        width: 2px;\r\n        height: 14px;\r\n    }\r\n`;","import AddNoteButton from './AddNoteButton';\r\n\r\nexport default AddNoteButton;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nimport Logo from 'resources/components/atoms/Logo';\r\nimport AddNoteButton from 'resources/components/atoms/AddNoteButton';\r\n\r\ninterface Props { }\r\n\r\ninterface State { }\r\n\r\nconst Menu = (props: Props, state: State) => {\r\n    const dispatch = useDispatch();\r\n    \r\n    return(\r\n        <MenuRoot>\r\n            <LogoRoot/>\r\n        </MenuRoot>\r\n    )\r\n}\r\n\r\nexport default Menu;\r\n\r\nconst MenuRoot = styled.div`\r\n    width: 256px;\r\n    min-height: 100vh;\r\n    background-color: #2F419B;\r\n    padding: 50px 33px;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n`;\r\n\r\nconst LogoRoot = styled(Logo)`\r\n    margin-left: 24px;\r\n`\r\n\r\nconst AddNoteButtonRoot = styled(AddNoteButton)`\r\n    margin: 33px 0;\r\n`","import React, { useState } from 'react';\r\nimport { HashRouter, BrowserRouter} from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport Router from './Router';\r\nimport Menu from './Menu';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('https://api.github.com/search/repositories?q=react&per_page=10&page=2').then(res =>\r\n            this.setState({\r\n                data: res.data.items\r\n            }))\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.state\r\n        return (\r\n            <div>\r\n                {\r\n                    data && (\r\n                        <>\r\n                            {\r\n                                data.map((row, index) => (\r\n                                    <h1 key={row.full_name}>{row.full_name}</h1>\r\n                                ))\r\n                            }\r\n                        </>\r\n                    )\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n`;","import App from './App';\r\n\r\nexport default App;","export const Types = {\r\n    GET_MASK_REQUEST: 'home/get_mask_request',\r\n    GET_MASK_SUCCESS: 'home/get_mask_success'\r\n}\r\n\r\nexport const getMaskRequest = () => ({\r\n    type: Types.GET_MASK_REQUEST\r\n})\r\n\r\nexport const getMaskSuccess = ({list}) => ({\r\n    type: Types.GET_MASK_SUCCESS,\r\n    payload: {\r\n        list\r\n    }\r\n})","import { Types } from './action'\r\n\r\nconst initState = {\r\n    list: []\r\n}\r\n\r\n\r\nconst Home = (state = initState, action) => {\r\n    switch(action.type){\r\n        case Types.GET_MASK_SUCCESS :\r\n            return {\r\n                ...state,\r\n                list: action.payload.list\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default Home;","import { combineReducers } from 'redux';\r\n\r\nimport Home from './Home/reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    Home\r\n})\r\n\r\nexport default rootReducer","import {takeEvery, takeLatest, take, call, fork, put} from 'redux-saga/effects';\r\nimport axios from 'axios';\r\nimport * as actions from './action';\r\nimport * as api from 'services/api/Home';\r\n\r\nfunction* getMask() {\r\n    try{\r\n        yield console.log('111')\r\n        const result = axios.get('https://api.github.com/repos/mini-ghost/TaiwanAQI')\r\n            .then(res => console.log(res))\r\n        yield console.log('result', result)\r\n        yield put(actions.getMaskSuccess({\r\n            list: result\r\n        }))\r\n    }catch (e) {\r\n        \r\n    }\r\n}\r\n\r\nfunction* watchGetNoteRequest() {\r\n    yield takeEvery(actions.Types.GET_MASK_REQUEST, getMask)\r\n}\r\n\r\nconst HomeSagas = [\r\n    fork(watchGetNoteRequest)\r\n];\r\n\r\nexport default HomeSagas;","import {all} from 'redux-saga/effects';\r\nimport HomeSagas from './Home/saga';\r\n\r\nexport default function* rootSagas() {\r\n    yield all([\r\n        ...HomeSagas\r\n    ])\r\n}","import React from 'react';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport axios from 'axios';\r\n\r\nimport Entrance from 'pages/App';\r\n\r\nimport rootReducers from 'config/library/redux/store/rootReducers';\r\nimport rootSagas from 'config/library/redux/store/rootSagas';\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\nlet store = createStore(\r\n  rootReducers,\r\n  composeEnhancers(applyMiddleware(sagaMiddleware))\r\n)\r\n\r\nsagaMiddleware.run(rootSagas);\r\n\r\naxios.defaults.withCredentials = true;\r\nif(process.env.NODE_ENV === \"development\") {\r\n  axios.defaults.baseURL = 'https://api.github.com/'\r\n} else {\r\n  axios.defaults.baseURL = 'https://api.github.com/'\r\n}\r\n\r\ninterface Props { }\r\n\r\ninterface State { }\r\n\r\nclass App extends React.Component<Props, State> {\r\n\r\n  render() {\r\n\r\n    return (\r\n      <Provider store={store}>\r\n        <Entrance/>\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'react-app-polyfill/ie11';\r\nimport 'react-app-polyfill/stable';\r\nimport './reset.css';\r\nimport 'resources/assets/icon/style.css'\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}